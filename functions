#!/usr/bin/env bash
set -eo pipefail; [[ $DOKKU_TRACE ]] && set -x
source "$(dirname "$0")/config"

get_container_ip() {
  docker inspect --format '{{ .NetworkSettings.IPAddress }}' "$1"
}

verify_service_name() {
  local SERVICE="$1"
  [[ ! -n "$SERVICE" ]] && dokku_log_fail "(verify_service_name) SERVICE must not be null"
  [[ ! -d "$PLUGIN_DATA_ROOT/$SERVICE" ]] && dokku_log_fail "$PLUGIN_SERVICE service $SERVICE does not exist"
  return 0
}

service_alias() {
  local SERVICE="$1"
  local SERVICE_NAME=$(get_service_name "$SERVICE")
  echo "$SERVICE_NAME" | tr ._ -
}

service_info() {
  local SERVICE="$1"
  local SERVICE_URL=$(service_url "$SERVICE")

  echo "       DSN: $SERVICE_URL"
}

service_list() {
  local SERVICES=$(ls "$PLUGIN_DATA_ROOT" 2> /dev/null)
  if [[ -z $SERVICES ]]; then
    dokku_log_warn "There are no $PLUGIN_SERVICE services"
  else
    LIST="NAME,VERSION,STATUS,EXPOSED PORTS,LINKS\n"
    for SERVICE in $SERVICES; do
      LIST+="$SERVICE,$(service_version "$SERVICE"),$(service_status "$SERVICE")\n"
    done
    printf "%b" "$LIST" | column -t -s,
  fi
}

service_logs() {
  local SERVICE="$1"
  local SERVICE_ROOT="$PLUGIN_DATA_ROOT/$SERVICE"
  local ID=$(cat "$SERVICE_ROOT/ID")

  if [[ $2 == "-t" ]]; then
    DOKKU_LOGS_ARGS="--follow"
  else
    DOKKU_LOGS_ARGS="--tail 100"
  fi

  docker logs $DOKKU_LOGS_ARGS "$ID"
}

service_set_alias() {
  local SERVICE="$1"
  local SERVICE_ROOT="$PLUGIN_DATA_ROOT/$SERVICE"
  local ALIAS_FILE="$SERVICE_ROOT/ALIAS"

  mkdir -p "$SERVICE_ROOT" || dokku_log_fail "Unable to create service directory"
  touch "$ALIAS_FILE"
  echo "$2" > "$ALIAS_FILE"
}

service_status() {
  local SERVICE="$1"
  local SERVICE_ROOT="$PLUGIN_DATA_ROOT/$SERVICE"
  local ID="$(cat "$SERVICE_ROOT/ID")"

  is_container_status "$ID" "Dead" && echo "dead" && return 0
  is_container_status "$ID" "OOMKilled" && echo "oomkilled" && return 0
  is_container_status "$ID" "Paused" && echo "paused" && return 0
  is_container_status "$ID" "Restarting" && echo "restarting" && return 0
  is_container_status "$ID" "Running" && echo "running" && return 0
  echo "stopped" && return 0
}

service_start() {
  local SERVICE="$1"
  local SERVICE_ROOT="$PLUGIN_DATA_ROOT/$SERVICE"
  local SERVICE_NAME=$(get_service_name "$SERVICE")
  local ID=$(docker ps -f status=running | grep "$SERVICE_NAME" | awk '{print $1}') || true
  [[ -n $ID ]] && dokku_log_warn "Service is already started" && return 0

  dokku_log_info1_quiet "Starting container"
  local PREVIOUS_ID=$(docker ps -f status=exited | grep "$SERVICE_NAME" | awk '{print $1}') || true
  if [[ -n $PREVIOUS_ID ]]; then
    docker start "$PREVIOUS_ID" > /dev/null
    service_port_unpause "$SERVICE"
    dokku_log_info2 "Container started"
  else
    dokku_log_verbose_quiet "No container exists for $SERVICE"
  fi
}

service_stop() {
  local SERVICE="$1"
  local SERVICE_ROOT="$PLUGIN_DATA_ROOT/$SERVICE";
  local SERVICE_NAME=$(get_service_name "$SERVICE")
  local ID=$(docker ps -f status=running | grep "$SERVICE_NAME" | awk '{print $1}') || true
  [[ -z $ID ]] && dokku_log_warn "Service is already stopped" && return 0

  if [[ -n $ID ]]; then
    dokku_log_info1_quiet "Stopping container"
    docker stop "$SERVICE_NAME" > /dev/null
    service_port_pause "$SERVICE"
    dokku_log_info2 "Container stopped"
  else
    dokku_log_verbose_quiet "No container exists for $SERVICE"
  fi
}

service_url() {
  local SERVICE="$1"
  local SERVICE_NAME="$(get_service_name "$SERVICE")"
  echo "http://$SERVICE_NAME"
}

is_container_status () {
  local CID=$1
  local TEMPLATE="{{.State.$2}}"
  local CONTAINER_STATUS=$(docker inspect -f "$TEMPLATE" "$CID" || true)

  if [[ "$CONTAINER_STATUS" == "true" ]]; then
    return 0
  else
    return 1
  fi
}

get_service_name() {
  local SERVICE="$1"
  echo "dokku.${PLUGIN_COMMAND_PREFIX}.$SERVICE"
}

service_version() {
  local SERVICE="$1"
  local SERVICE_NAME="$(get_service_name "$SERVICE")"
  docker inspect -f '{{.Config.Image}}' "$SERVICE_NAME"
}

get_url_from_config() {
  local EXISTING_CONFIG="$1"
  local CONFIG_VAR="$2"
  echo "$EXISTING_CONFIG" | grep "$CONFIG_VAR" | sed "s/$CONFIG_VAR:\s*//"
}
