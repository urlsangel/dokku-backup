#!/usr/bin/env bash
set -eo pipefail; [[ $DOKKU_TRACE ]] && set -x

PLUGIN_BASE_PATH="$PLUGIN_PATH"
if [[ -n $DOKKU_API_VERSION ]]; then
  PLUGIN_BASE_PATH="$PLUGIN_ENABLED_PATH"
fi
source "$PLUGIN_BASE_PATH/common/functions"
source "$(dirname "$0")/functions"
source "$(dirname "$0")/config"

if [[ $1 == $PLUGIN_COMMAND_PREFIX:* ]]; then
  if [[ ! -d $PLUGIN_DATA_ROOT ]]; then
    dokku_log_fail "$PLUGIN_SERVICE: Please run: sudo dokku plugin:install"
  fi
fi

if [[ -d "$PLUGIN_DATA_ROOT/*" ]]; then
  rm -rf "$PLUGIN_DATA_ROOT/*"
fi

case "$1" in
  $PLUGIN_COMMAND_PREFIX:create)
    [[ -z $2 ]] && dokku_log_fail "Please specify a name for the service"
    [[ ! -d "$PLUGIN_DATA_ROOT/$2" ]] || dokku_log_fail "$PLUGIN_SERVICE service $2 already exists"
    SERVICE="$2"; SERVICE_ROOT="$PLUGIN_DATA_ROOT/$SERVICE"; LINKS_FILE="$SERVICE_ROOT/LINKS"

    if ! docker images | grep -e "^$PLUGIN_IMAGE " | grep -q " $PLUGIN_IMAGE_VERSION " ; then
      dokku_log_fail "$PLUGIN_SERVICE image $PLUGIN_IMAGE:$PLUGIN_IMAGE_VERSION not found"
    fi

    mkdir -p "$SERVICE_ROOT" || dokku_log_fail "Unable to create service directory"
    touch "$LINKS_FILE"

    dokku_log_info1 "Starting container"

    DATABASE_URL=$(dokku config:get $2 DATABASE_URL)
    COUCHDB_URL=$(dokku config:get $2 COUCHDB_URL)
    S3ACCESSID=$(dokku config:get $2 S3ACCESSID)
    S3SECRETKEY=$(dokku config:get $2 S3SECRETKEY)
    S3REGION=$(dokku config:get $2 S3REGION)
    S3BACKUPBUCKET=$(dokku config:get $2 S3BACKUPBUCKET)

    dokku_log_info1 "DATABASE_URL: $DATABASE_URL"
    dokku_log_info1 "COUCHDB_URL: $COUCHDB_URL"
    dokku_log_info1 "S3ACCESSID: $S3ACCESSID"
    dokku_log_info1 "S3SECRETKEY: $S3SECRETKEY"
    dokku_log_info1 "S3REGION: $S3REGION"
    dokku_log_info1 "S3BACKUPBUCKET: $S3BACKUPBUCKET"
    
    SERVICE_NAME=$(get_service_name "$SERVICE")
    dokku_log_info1 "Service name: $SERVICE_NAME"
    dokku_log_info1 "PLUGIN_IMAGE: $PLUGIN_IMAGE"
    dokku_log_info1 "PLUGIN_IMAGE_VERSION: $PLUGIN_IMAGE_VERSION"
    
    ID=$(docker run --name "$SERVICE_NAME" -e DATABASE_URL=$DATABASE_URL -e COUCHDB_URL=$COUCHDB_URL -e S3ACCESSID=$S3ACCESSID -e S3SECRETKEY=$S3SECRETKEY -e S3REGION=$S3REGION -e S3BACKUPBUCKET=$S3BACKUPBUCKET -e SCHEDULE=@daily -d --restart always --label dokku=service --label dokku.service=s3backup "$PLUGIN_IMAGE:$PLUGIN_IMAGE_VERSION")
    echo "$ID" > "$SERVICE_ROOT/ID"

    dokku_log_verbose_quiet "Waiting for container to be ready"
    # docker run --rm --link "$SERVICE_NAME:$PLUGIN_COMMAND_PREFIX" dokkupaas/wait > /dev/null
    
    service_start "$SERVICE" > /dev/null
    dokku_log_info1 "ID: $ID"

    dokku_log_info2 "$PLUGIN_SERVICE container created: $SERVICE"
    # dokku "$PLUGIN_COMMAND_PREFIX:info" "$SERVICE"
    ;;

  $PLUGIN_COMMAND_PREFIX:destroy)
    [[ -z $2 ]] && dokku_log_fail "Please specify a name for the service"
    verify_service_name "$2"
    SERVICE="$2"; SERVICE_ROOT="$PLUGIN_DATA_ROOT/$SERVICE"
    SERVICE_NAME=$(get_service_name "$SERVICE")

    [[ "$3" == "force" ]] && DOKKU_APPS_FORCE_DELETE=1
    if [[ -z "$DOKKU_APPS_FORCE_DELETE" ]]; then
      dokku_log_warn "WARNING: Potentially Destructive Action"
      dokku_log_warn "This command will destroy $SERVICE $PLUGIN_SERVICE service."
      dokku_log_warn "To proceed, type \"$SERVICE\""
      echo ""

      read -p "> " service_name
      if [[ "$service_name" != "$SERVICE" ]]; then
        dokku_log_warn "Confirmation did not match $SERVICE. Aborted."
        exit 1
      fi
    fi

    dokku_log_info1 "Deleting $SERVICE"
    if [[ -n $(docker ps -aq -f name="$SERVICE_NAME") ]]; then
      service_stop "$SERVICE"
      sleep 1

      dokku_log_verbose_quiet "Removing container"
      docker rm -v "$SERVICE_NAME" > /dev/null
      sleep 1
    else
      dokku_log_verbose_quiet "No container exists for $SERVICE"
    fi

    rm -rf "$SERVICE_ROOT"

    dokku_log_info2 "$PLUGIN_SERVICE container deleted: $SERVICE"
    ;;


  $PLUGIN_COMMAND_PREFIX:now)   
    [[ -z $2 ]] && dokku_log_fail "Please specify a name for the service"
    verify_service_name "$2" 
    SERVICE_NAME=$(get_service_name "$2")
    docker exec "$SERVICE_NAME" env SCHEDULE=**None** "/bin/bash run.sh"
    ;;


  $PLUGIN_COMMAND_PREFIX:logs)
    [[ -z $2 ]] && dokku_log_fail "Please specify a name for the service"
    verify_service_name "$2"
    service_logs "$2" "$3"
    ;;

  $PLUGIN_COMMAND_PREFIX:start)
    [[ -z $2 ]] && dokku_log_fail "Please specify a name for the service"
    verify_service_name "$2"
    service_start "$2"
    SERVICE="$2"; SERVICE_ROOT="$PLUGIN_DATA_ROOT/$SERVICE"
    SERVICE_NAME="$(get_service_name "$SERVICE")"
    docker exec "$SERVICE_NAME" /run.sh
    ;;

  $PLUGIN_COMMAND_PREFIX:stop)
    [[ -z $2 ]] && dokku_log_fail "Please specify a name for the service"
    verify_service_name "$2"
    service_stop "$2"
    ;;

  $PLUGIN_COMMAND_PREFIX:restart)
    [[ -z $2 ]] && dokku_log_fail "Please specify a name for the service"
    verify_service_name "$2"
    service_stop "$2"
    service_start "$2"
    dokku_log_info1 "Please call dokku ps:restart on all linked apps"
    ;;

  $PLUGIN_COMMAND_PREFIX:info)
    [[ -z $2 ]] && dokku_log_fail "Please specify a name for the service"
    verify_service_name "$2"
    service_info "$2"
    ;;

  $PLUGIN_COMMAND_PREFIX:list)
    service_list
    ;;

  help | $PLUGIN_COMMAND_PREFIX:help)
    HELP=$(cat<<EOF
    $PLUGIN_COMMAND_PREFIX:create <name>, Create a $PLUGIN_SERVICE service
    $PLUGIN_COMMAND_PREFIX:destroy <name>, Delete the $PLUGIN_SERVICE service and stop its container if there are no links left
    $PLUGIN_COMMAND_PREFIX:logs <name> [-t], Print the most recent log(s) for this service
    $PLUGIN_COMMAND_PREFIX:restart <name>, Graceful shutdown and restart of the $PLUGIN_SERVICE service container
    $PLUGIN_COMMAND_PREFIX:info <name>, Print the connection information
    $PLUGIN_COMMAND_PREFIX:list, List all $PLUGIN_SERVICE services
    $PLUGIN_COMMAND_PREFIX:start <name>, Start a previously stopped $PLUGIN_SERVICE service
    $PLUGIN_COMMAND_PREFIX:stop <name>, Stop a running $PLUGIN_SERVICE service
EOF
)
    if [[ -n $DOKKU_API_VERSION ]]; then
      echo "$HELP"
    else
      cat && echo "$HELP"
    fi
    ;;

  *)
    exit "$DOKKU_NOT_IMPLEMENTED_EXIT"
    ;;

esac
